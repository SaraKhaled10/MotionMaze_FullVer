import gnu.io.*; // RXTX library for serial communication
import java.io.*;
import java.util.*;

// === Observer Pattern Interface ===
interface GameObserver {
    void onEvent(String message);
}

// === GameState (State Pattern) ===
abstract class GameState {
    abstract void handleInput(GameEngine engine, int code);
}

class PlayingState extends GameState {
    void handleInput(GameEngine engine, int code) {
        switch (code) {
            case 3: // Motion detected
                System.out.println("Obstacle detected! Check if player dodges it.");
                engine.sendFeedback(6); // Simulate hit for now
                break;
            case 4: // Power-up
                System.out.println("Power-up collected!");
                engine.sendFeedback(5);
                break;
            case 7: // Reset
                System.out.println("Game resetting...");
                engine.setState(new ReadyState());
                break;
            case 8: // Pause
                System.out.println("Game paused");
                engine.setState(new PausedState());
                break;
        }
    }
}

class PausedState extends GameState {
    void handleInput(GameEngine engine, int code) {
        if (code == 8) { // Resume
            System.out.println("Resuming game...");
            engine.setState(new PlayingState());
        }
    }
}

class ReadyState extends GameState {
    void handleInput(GameEngine engine, int code) {
        if (code == 7) {
            System.out.println("Starting new game...");
            engine.setState(new PlayingState());
        }
    }
}

// === Game Engine ===
public class GameEngine implements SerialPortEventListener {

    private SerialPort serialPort;
    private InputStream input;
    private OutputStream output;
    private GameState currentState;
    private final List<GameObserver> observers = new ArrayList<>();

    public GameEngine() {
        this.currentState = new ReadyState();
    }

    public void initialize() {
        try {
            CommPortIdentifier portId = CommPortIdentifier.getPortIdentifier("COM3");
            serialPort = (SerialPort) portId.open("GameController", 2000);
            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);

            input = serialPort.getInputStream();
            output = serialPort.getOutputStream();
            serialPort.addEventListener(this);
            serialPort.notifyOnDataAvailable(true);

            System.out.println("Connected to Arduino via COM3");
        } catch (Exception e) {
            System.err.println("Connection Error: " + e.getMessage());
        }
    }

    public void setState(GameState state) {
        this.currentState = state;
    }

    public void sendFeedback(int code) {
        try {
            output.write(code);
            output.flush();
        } catch (IOException e) {
            System.err.println("Failed to send: " + e.getMessage());
        }
    }

    public void serialEvent(SerialPortEvent event) {
        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
            try {
                int code = input.read();
                currentState.handleInput(this, code);
                notifyObservers("Received code: " + code);
            } catch (IOException e) {
                System.err.println("Read error: " + e.getMessage());
            }
        }
    }

    public void addObserver(GameObserver observer) {
        observers.add(observer);
    }

    private void notifyObservers(String message) {
        for (GameObserver o : observers) {
            o.onEvent(message);
        }
    }

    public static void main(String[] args) {
        GameEngine engine = new GameEngine();
        engine.addObserver(msg -> System.out.println("[LOG] " + msg));
        engine.initialize();
    }
}