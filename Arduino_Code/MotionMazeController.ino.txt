#include <Wire.h>         // For I2C communication with MPU6050
#include <SoftwareSerial.h> // For serial communication with ZigBee
#include <MPU6050.h>      // Library for the accelerometer
#include <Servo.h>        // Library for servo motor control

// Pin Definitions
#define MOTION_SENSOR_PIN 2    // PIR motion sensor input
#define BUTTON_PIN 3           // Push button for game start/restart
#define RED_LED_PIN 6          // RGB LED Red component
#define GREEN_LED_PIN 9        // RGB LED Green component
#define BLUE_LED_PIN 10        // RGB LED Blue component
#define BUZZER_PIN 11          // Buzzer for sound effects
#define SERVO_PIN 12           // Servo motor for physical barrier
#define ZIGBEE_RX_PIN 4        // ZigBee module RX (receive from Java)
#define ZIGBEE_TX_PIN 5        // ZigBee module TX (transmit to Java)

// ZigBee communication - Handles bidirectional data flow
SoftwareSerial zigbeeSerial(ZIGBEE_RX_PIN, ZIGBEE_TX_PIN); // RX, TX

// MPU6050 accelerometer - Primary input method
MPU6050 accelerometer;

// Servo motor - Physical feedback mechanism
Servo barrierServo;

// Game state constants - Used to control feedback systems
#define STATE_IDLE 0       // Waiting to start
#define STATE_PLAYING 1    // Game in progress
#define STATE_COLLISION 2  // Hit obstacle
#define STATE_POWER_UP 3   // Collected power-up
#define STATE_GAME_OVER 4  // Game finished
#define STATE_SPECIAL_1 5  // Special state 1 (visual effect)
#define STATE_SPECIAL_2 6  // Special state 2 (visual effect)
#define STATE_RESET 7      // Game reset command

// Sound tones (in Hz) - Audio feedback for different events
#define TONE_START 1000     // Game start tone
#define TONE_COLLISION 200  // Obstacle collision tone
#define TONE_POWER_UP 1500  // Power-up collection tone
#define TONE_GAME_OVER 400  // Game over tone
#define TONE_SPECIAL 800    // Special event tone

// Variables - Track system state
int gameState = STATE_IDLE;
bool buttonPressed = false;
bool motionDetected = false;
unsigned long lastLedUpdate = 0;
unsigned long lastDataSent = 0;
unsigned long lastButtonCheck = 0;
unsigned long lastServoUpdate = 0;
unsigned long lastMotionCheck = 0;
unsigned long ledBlinkInterval = 0;
bool ledState = false;
int servoPosition = 90;  // Default servo position (centered)
int servoDirection = 1;  // Direction of servo movement (1 = clockwise, -1 = counterclockwise)

//Setup function - Initializes all hardware components
 
void setup() {
  // Initialize pins - Set input/output modes
  pinMode(MOTION_SENSOR_PIN, INPUT);  // PIR sensor as input
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Button with internal pull-up resistor
  pinMode(RED_LED_PIN, OUTPUT);       // LED pins as outputs
  pinMode(GREEN_LED_PIN, OUTPUT);
  pinMode(BLUE_LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);        // Buzzer as output

// Initialize serial communications - For debugging and ZigBee
  Serial.begin(9600);      // USB serial for debugging
  zigbeeSerial.begin(9600); // ZigBee communication to Java
  
  // Initialize the MPU6050 accelerometer
  Wire.begin();  // Start I2C communication
  accelerometer.initialize();  // Initialize the sensor
  
  // Initialize the servo motor
  barrierServo.attach(SERVO_PIN);
  barrierServo.write(servoPosition);  // Set to default position
  
  // Check accelerometer connection - Critical for game control
  if (accelerometer.testConnection()) {
    Serial.println("MPU6050 connection successful");
  } else {
    // Error handling - Visual feedback of failure
    Serial.println("MPU6050 connection failed");
    setLedColor(255, 0, 0); // Red indicates error
    while (1); // Halt execution if accelerometer not found
  }
  
  // Initial LED state - Visual indication of successful startup
  setLedColor(255, 255, 255);  // White for startup
  tone(BUZZER_PIN, TONE_START, 300);  // Startup tone
  delay(500);
  setLedColor(0, 0, 0);  // Turn off LEDs after startup
}

//Main program loop - Continuously checks sensors and updates state
 
void loop() {
  unsigned long currentMillis = millis();  // Current time for timing operations
  
  // Read button state (with debounce) - For user input
  if (currentMillis - lastButtonCheck >= 50) { // Check every 50ms
    lastButtonCheck = currentMillis;
    if (digitalRead(BUTTON_PIN) == LOW && !buttonPressed) {
      // Button pressed (pulls pin LOW due to INPUT_PULLUP)
      buttonPressed = true;
      sendButtonPress();  // Send to Java
      tone(BUZZER_PIN, TONE_START, 200);  // Audible feedback
    } else if (digitalRead(BUTTON_PIN) == HIGH) {
      // Button released
      buttonPressed = false;
    }
  }
  
  // Read motion sensor - For obstacle generation
  if (currentMillis - lastMotionCheck >= 100) { // Check every 100ms
    lastMotionCheck = currentMillis;
    bool currentMotionState = digitalRead(MOTION_SENSOR_PIN) == HIGH;
    if (currentMotionState != motionDetected) {
      motionDetected = currentMotionState;
      if (motionDetected) {
        // Motion detected - Send to Java
        sendMotionDetected();
        // Move servo when motion detected
        moveServo();
      }
    }
  }
  
  // Send accelerometer data - Main control input
  if (currentMillis - lastDataSent >= 100) { // Send every 100ms
    lastDataSent = currentMillis;
    sendAccelerometerData();
  }
  
  // Update servo position - Animated barrier movement
  if (currentMillis - lastServoUpdate >= 50) {
    lastServoUpdate = currentMillis;
    updateServo();
  }
  
  // Check for incoming commands from Java - Bidirectional communication
  while (zigbeeSerial.available()) {
    processIncomingCommand();
  }
  
  // Handle LED blinking for visual effect states
  if (ledBlinkInterval > 0 && currentMillis - lastLedUpdate >= ledBlinkInterval) {
    lastLedUpdate = currentMillis;
    ledState = !ledState;  // Toggle LED state
    
    // Different blink patterns for different game states
    switch (gameState) {
      case STATE_COLLISION:
        // Red blink for collision
        if (ledState) setLedColor(255, 0, 0); // Red
        else setLedColor(0, 0, 0); // Off
        break;
      case STATE_POWER_UP:
        // Blue blink for power-up
        if (ledState) setLedColor(0, 0, 255); // Blue
        else setLedColor(0, 0, 0); // Off
        break;
      case STATE_GAME_OVER:
        // Orange blink for game over
        if (ledState) setLedColor(255, 165, 0); // Orange
        else setLedColor(0, 0, 0); // Off
        break;
      case STATE_SPECIAL_1:
        // Purple blink for special state 1
        if (ledState) setLedColor(255, 0, 255); // Purple
        else setLedColor(0, 0, 0); // Off
        break;
      case STATE_SPECIAL_2:
        // Yellow blink for special state 2
        if (ledState) setLedColor(255, 255, 0); // Yellow
        else setLedColor(0, 0, 0); // Off
        break;
    }
  }
}

/**
 * Sets the RGB LED color by controlling PWM values
 * 
 * @param red - Red component (0-255)
 * @param green - Green component (0-255)
 * @param blue - Blue component (0-255)
 */
void setLedColor(int red, int green, int blue) {
  // Use PWM to control LED brightness for each color channel
  analogWrite(RED_LED_PIN, red);
  analogWrite(GREEN_LED_PIN, green);
  analogWrite(BLUE_LED_PIN, blue);
}

/**
 * Reads accelerometer data and sends tilt angles to Java
 * Central to tilt-based control scheme
 */
void sendAccelerometerData() {
  int16_t ax, ay, az;  // Raw acceleration values
  
  // Read raw values from the sensor
  accelerometer.getAcceleration(&ax, &ay, &az);
  
  // Convert raw values to g forces (1g = 16384 in raw value)
  float accelX = ax / 16384.0;
  float accelY = ay / 16384.0;
  
  // Calculate tilt angles using trigonometry
  // atan2 returns angle in radians, convert to degrees by multiplying by 180/PI
  float angleX = atan2(accelX, sqrt(accelY*accelY + (az/16384.0)*(az/16384.0))) * 180.0 / PI;
  float angleY = atan2(accelY, sqrt(accelX*accelX + (az/16384.0)*(az/16384.0))) * 180.0 / PI;
  
  // Send formatted tilt data to Java via ZigBee
  // Format: "A,angleX,angleY" (A for Accelerometer)
  zigbeeSerial.print("A,");
  zigbeeSerial.print(angleX);
  zigbeeSerial.print(",");
  zigbeeSerial.println(angleY);
}

/**
 * Sends button press event to Java
 * Used for game start/pause/restart
 */
void sendButtonPress() {
  // Format: "B,1" (B for Button, 1 for pressed)
  zigbeeSerial.println("B,1");
}

/**
 * Sends motion detection event to Java
 * Triggers obstacle creation in game
 */
void sendMotionDetected() {
  // Format: "M,1" (M for Motion, 1 for detected)
  zigbeeSerial.println("M,1");
}

/**
 * Triggers servo movement when motion is detected
 * Physical barrier response to game events
 */
void moveServo() {
  // Randomize servo direction when motion is detected
  servoDirection = random(2) * 2 - 1; // Generates either -1 or 1
  
  // Set new target position (either 0 or 180 depending on direction)
  if (servoDirection > 0) {
    servoPosition = 0; // Move to minimum position
  } else {
    servoPosition = 180; // Move to maximum position
  }
  
  // Move servo to new position
  barrierServo.write(servoPosition);
}

/**
 * Updates servo position over time for smooth animation
 * Creates physical movement corresponding to game state
 */
void updateServo() {
  // Only update servo in certain game states
  if (gameState == STATE_PLAYING || gameState == STATE_POWER_UP) {
    // Move servo based on game state
    if (gameState == STATE_POWER_UP) {
      // Oscillate servo during power-up
      servoPosition += servoDirection * 5;
      if (servoPosition >= 180 || servoPosition <= 0) {
        servoDirection *= -1; // Reverse direction at limits
      }
    } else {
      // Slowly return to center during normal play
      if (servoPosition < 90) servoPosition += 1;
      else if (servoPosition > 90) servoPosition -= 1;
    }
    
    // Ensure position stays within valid range
    servoPosition = constrain(servoPosition, 0, 180);
    barrierServo.write(servoPosition);
  }
}

/**
 * Processes commands received from Java
 * Handles bidirectional communication for game feedback
 */
void processIncomingCommand() {
  // Read the full command line
  String command = zigbeeSerial.readStringUntil('\n');
  command.trim(); // Remove whitespace
  
  // Parse command and value
  char cmdType = command.charAt(0);
  int value = command.substring(2).toInt();
  
  // Execute appropriate action based on command type
  switch (cmdType) {
    case 'S': // State change command
      gameState = value;
      updateStateVisuals();
      break;
    case 'T': // Tone command
      tone(BUZZER_PIN, value, 200);
      break;
    case 'R': // Reset command

if (value == STATE_RESET) {
        // Reset game state
        gameState = STATE_IDLE;
        updateStateVisuals();
        // Reset servo to center position
        servoPosition = 90;
        barrierServo.write(servoPosition);
        // Confirmation sound
        tone(BUZZER_PIN, TONE_START, 300);
      }
      break;
    case 'V': // Special visual effects
      if (value == 5 || value == 6) {
        // Handle special visual states
        gameState = value;
        updateStateVisuals();
      }
      break;
  }
}

/**
 * Updates visual and audio feedback based on game state
 * Central method for coordinating multiple feedback mechanisms
 */
void updateStateVisuals() {
  // Stop any existing blinking pattern
  ledBlinkInterval = 0;
  
  // Set appropriate LED color and sound for current state
  switch (gameState) {
    case STATE_IDLE:
      // White for idle/ready state
      setLedColor(255, 255, 255);
      break;
    case STATE_PLAYING:
      // Green for active gameplay
      setLedColor(0, 255, 0);
      break;
    case STATE_COLLISION:
      // Red for collision with obstacle
      setLedColor(255, 0, 0);
      tone(BUZZER_PIN, TONE_COLLISION, 300);
      ledBlinkInterval = 200; // Medium speed blinking
      break;
    case STATE_POWER_UP:
      // Blue for power-up collection
      setLedColor(0, 0, 255);
      tone(BUZZER_PIN, TONE_POWER_UP, 200);
      ledBlinkInterval = 100; // Fast blinking
      break;
    case STATE_GAME_OVER:
      // Orange for game completion
      setLedColor(255, 165, 0);
      tone(BUZZER_PIN, TONE_GAME_OVER, 500);
      ledBlinkInterval = 500; // Slow blinking
      break;
    case STATE_SPECIAL_1:
      // Purple for special state 1
      setLedColor(255, 0, 255);
      tone(BUZZER_PIN, TONE_SPECIAL, 200);
      ledBlinkInterval = 150; // Custom blink rate
      break;
    case STATE_SPECIAL_2:
      // Yellow for special state 2
      setLedColor(255, 255, 0);
      tone(BUZZER_PIN, TONE_SPECIAL, 300);
      ledBlinkInterval = 250; // Custom blink rate
      break;
  }
}
