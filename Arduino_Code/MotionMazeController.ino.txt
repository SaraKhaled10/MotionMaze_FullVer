#include <Servo.h>
#include <SoftwareSerial.h>

// Pin Definitions
#define MOTION_SENSOR_PIN 4
#define RED_PIN 5
#define GREEN_PIN 6
#define BLUE_PIN 7
#define BUTTON_PIN 8
#define SERVO_PIN 9

// ZigBee
SoftwareSerial zigbee(2, 3); // RX, TX

// Servo
Servo gameServo;

// State Variables
bool lastButtonState = HIGH;
unsigned long buttonPressedTime = 0;

void setup() {
  pinMode(MOTION_SENSOR_PIN, INPUT);
  pinMode(RED_PIN, OUTPUT);
  pinMode(GREEN_PIN, OUTPUT);
  pinMode(BLUE_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  gameServo.attach(SERVO_PIN);
  gameServo.write(0); // Initial servo position

  zigbee.begin(9600);
  Serial.begin(9600);

  // Startup LED feedback (green)
  setLED(0, 255, 0);
  delay(1000);
  setLED(0, 0, 0);
}

void loop() {
  // Button handling: short press = pause/resume (8), long press = reset (7)
  bool buttonState = digitalRead(BUTTON_PIN);

  if (lastButtonState == HIGH && buttonState == LOW) {
    buttonPressedTime = millis();
  }

  if (lastButtonState == LOW && buttonState == HIGH) {
    unsigned long pressDuration = millis() - buttonPressedTime;

    if (pressDuration >= 2000) {
      zigbee.print(7); // Reset
    } else {
      zigbee.print(8); // Pause/Resume
    }
  }

  lastButtonState = buttonState;

  // PIR motion sensor: trigger obstacle
  if (digitalRead(MOTION_SENSOR_PIN) == HIGH) {
    zigbee.print(3); // Motion detected
    delay(1000); // Debounce delay
  }

  // Read feedback from Java controller
  if (zigbee.available()) {
    int receivedCode = zigbee.read();
    updateFeedback(receivedCode);
  }
}

void updateFeedback(int code) {
  switch (code) {
    case 5:
      setLED(0, 0, 255); // Blue for power-up
      break;
    case 6:
      setLED(255, 0, 0); // Red for obstacle
      break;
    case 7:
      resetGame();
      break;
    case 8:
      pauseGame();
      break;
  }
}

void setLED(int r, int g, int b) {
  analogWrite(RED_PIN, r);
  analogWrite(GREEN_PIN, g);
  analogWrite(BLUE_PIN, b);
}

void resetGame() {
  setLED(0, 255, 0); // Flash green for reset
  gameServo.write(0); // Reset servo
  delay(500);
  setLED(0, 0, 0);
}

void pauseGame() {
  setLED(255, 255, 0); // Yellow to indicate paused
  delay(500);
  setLED(0, 0, 0);
}